const int fps = 30;

    Game game(10,10,10,10);

    SDL_Surface* screen;
    SDL_Surface* icon = IMG_Load("./res/chess_icon.png");
    
    SDL_Window* window = nullptr;


    

    SDL_Init(SDL_INIT_VIDEO);
    window = SDL_CreateWindow(
        "Chess Game",
        500,
        250,
        512,
        512,
        SDL_WINDOW_SHOWN
    );

    SDL_SetWindowResizable(window,SDL_FALSE);
    SDL_SetWindowIcon(window, icon);
    SDL_Renderer* renderer = SDL_CreateRenderer(window,-1,SDL_RENDERER_ACCELERATED);
    SDL_Rect rectangle,moving_rect,rect3;
    SDL_SetRenderDrawColor(renderer,0,0,0,SDL_ALPHA_OPAQUE);

    rect3.x = 0;
    rect3.y = 0;
    rect3.w = 512;
    rect3.h = 512;
    SDL_Surface* pawn = IMG_Load("./res/king.png");
    SDL_Texture* pawn_texture = SDL_CreateTextureFromSurface(renderer,pawn);

    SDL_Surface* start_screen = IMG_Load("./res/startscreen.png");
    SDL_Texture* start_screen_texture = SDL_CreateTextureFromSurface(renderer,start_screen);
    SDL_RenderCopy(renderer,start_screen_texture,NULL,&rect3);

    


    moving_rect.x = 64;
    moving_rect.y = 64;
    moving_rect.w = 64;
    moving_rect.h = 64;  
    


    bool gameIsRunning = true;
    while(gameIsRunning){
            

        SDL_Event event;
        while(SDL_PollEvent(&event)){
            switch (event.type)
            {
            case SDL_QUIT:
                gameIsRunning=false;
                break;
            case SDL_WINDOWEVENT_RESIZED:
                cout << "size changed";
            case SDL_KEYDOWN:
                SDL_RenderClear(renderer);
                switch (event.key.keysym.sym)
                {
                case SDLK_a:
                    print_board(rectangle,renderer,moving_rect,pawn_texture);
                    break;
                case SDLK_w:
                    break;
                case SDLK_s:
                    cout << "S";
                    break;
                case SDLK_d:
                    break;
                case SDLK_c:
                    break;
                }
             
            default:
                break;
            }
            
        }

        SDL_SetRenderDrawColor(renderer,90,90,90,0);
        
        SDL_RenderCopy(renderer,NULL,NULL,&rectangle);
        
        SDL_RenderPresent(renderer);
        
        
        

          
    }
    SDL_DestroyWindow(window);
    SDL_Quit();